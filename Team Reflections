SPRINT REVIEW 1:

How did the sprint go?
It did not go as well as we hoped, but we finished most of the user stories, we failed in dividing the stories enough so some of the tasks
became too “large” and gave some of the stories the wrong priority. The backend stories were also a little too large in scope, and we should
have gone smaller for the first sprint, we nonetheless got a functional program that lets us play and create flashcard sets. We had a lot of
meetings and that was great, but the meeting where we created stories was difficult because we didn’t know how large the workload would be
before we started. For example, when we created a File Management Story, we realized during the coding that we could have split it up into
several stories. They also weren't descriptive enough and that led to more confusion.

Did we complete our tasks?
Mostly yes, we successfully completed the backend and half of the frontend tasks we set up for this sprint, even though we had poor planning.
With the workload being a bit too big resulted in the program working but poorly built regarding its structure.

Did the members cooperate well?
Natalie and Anthon cooperated well. They communicated and worked together over audio calls on discord as well as meeting in person. 

Alexander, Lucas, Leo and Oskar all worked on the same project which made it hard for them to decide who should do what and in what order. 
Next time we will plan and distribute work concretely at the beginning of the sprint.

Was the workload sufficinent and/or manageable?
The workload was big for the backend, and we would have needed more structure so the load could be equal amongst all members.
The front end part was manageable, and in future sprints we could probably add one more view on the to do list. 

What needs to change until the next sprint?
We need a better structure for our meetings, for example a couple of pointers that we follow for the meetings we have on monday and friday. 
We need to set up smaller goals that we can sequentially complete, instead of promising to deliver a complete program with many steps within
one sprint.

----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW 2:

How did the sprint go?
Problems that occurred during this week’s sprint:
Multiple people got sick.
The main branch was unrunnable at start.
People working on different code base.
Confusion on how MVC works.
People doing each others work.

Did we complete our tasks?
No, some people managed to complete their part, but overall we did not accomplish what we set up to do.

Did the members cooperate well?
Yes and no. Cooperation within the frontend group went well, but the same can’t be said for the backend group, and between the two groups.
We planned together how to structure the program but when it came to programming little to no communication was done.

Was the workload sufficinent and/or manageable?
It was fairly sufficient, but the backend team divided all the work between them the day before the deadline. This happened because several
members had gotten sick and were unable to attend the initially planned meeting, so we had to postpone the work to a later date. As well as
certain problems, in the code, erupting after the last sprint, leading to delayed work.

What needs to change until the next sprint?
We need more structure in our meetings, a couple of pointers to follow and talk about prepared for each meeting.
The backend programmers should work in two pairs instead of as a unit  of four.
Natalie and Anthon should communicate when they start and finish work in Scene Builder since working on it separately at the same time may
result in loss of changes. Communicate with each other during coding if changes need to be made. This is done via discord in the new channel
"updates".

----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW 3:

How did the sprint go?
It went well. We completed most of our planned user stories and had time to catch up from last week's disturbances. 

Did we complete our tasks?
We completed almost all user stories, but we had a problem with merging. Causing the tasks as a whole not to be completed. The tasks still work 
by themselves.

Anthon got stuck on a specific error and therefore didn’t have the time to complete one of the user stories he was assigned.

Did the members cooperate well?
This week the backend programmers split up in groups of two and worked together on user stories with closer communication, this went well as we 
were able to discuss ideas and implementations with each other more easily. 

In this sprint one misunderstanding occurred, the group did not have the same visions for the “multiple choices” feature. This could be avoided by 
more detailed communication among us. 

Was the workload sufficinent and/or manageable?
The workload this week was manageable for the most part, however we had some larger stories from last week that we had left over, for example the 
MVC user story. But this still sufficed and did not overflow our work load. 

What needs to change until the next sprint?
Next week we will work on user stories in separate branches, and then merge those branches into the main branch when completely done.
When we are assigned a user story we should present how we are going to implement that work in order to prevent misunderstanding such as what 
happened with “multiple choices” this week.

----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW WEEK 4:

How did the sprint go?
It went well. We completed most of our planned user stories and had time to catch up from last week's disturbances. 

Did we complete our tasks?
We completed almost all user stories, but we had a problem with merging. Causing the tasks as a whole not to be completed. The tasks still work 
by themselves. Anthon got stuck on a specific error and therefore didn’t have the time to complete one of the user stories he was assigned.

Did the members cooperate well?
This week the backend programmers split up in groups of two and worked together on user stories with closer communication, this went well as we 
were able to discuss ideas and implementations with each other more easily. 

In this sprint one misunderstanding occurred, the group did not have the same visions for the “multiple choices” feature. This could be avoided 
by more detailed communication among us. 

Was the workload sufficinent and/or manageable?
The workload this week was manageable for the most part, however we had some larger stories from last week that we had left over, for example the 
MVC user story. But this still sufficed and did not overflow our work load. 

What needs to change until the next sprint?
Next week we will work on user stories in separate branches, and then merge those branches into the main branch when completely done.

When we are assigned a user story we should present how we are going to implement that work in order to prevent misunderstanding such as what 
happened with “multiple choices” this week.

----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW WEEK 5:

How did the sprint go?
It went well.

Did we complete our tasks?
All members completed their tasks. 

Did the members cooperate well?
We had good communication this sprint, 

Was the workload sufficinent and/or manageable?
The workload was manageable, however the backend developers didn’t have much to do due to the backend being mostly complete. For most of the 
group members, the stress level decreased this sprint. 

What needs to change until the next sprint?
We need to improve our ability to distribute work as well as understand how much work we are capable of achieving.


----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW 6:

How did the sprint go?
It went well. Reaching the end of the project, we're noticing that the workload is getting uneven, this is because the front end developers
have most of their work to do right now while the back end developers don't have much work to do at all. This situation has occured because
the back end developers doesn't have the knowledge in javafx required to help with the tasks given to the front end developers. 

Did we complete our tasks?
All members completed their tasks. 

Did the members cooperate well?
We had good communication this sprint.

Was the workload sufficinent and/or manageable?
The workload was manageable, however the backend developers didn’t have much to do due to the backend being mostly complete. For most of the 
group members, the stress level decreased this sprint. 

What needs to change until the next sprint?
We need to improve our ability to distribute work as well as understand how much work we are capable of achieving.

----------------------------------------------------------------------------------------------------------------------------------------------

SPRINT REVIEW WEEK 7:

How did the sprint go?
It went well, we have developed a better understanding for how we as a team work in an agile way of working. 

Did we complete our tasks?
we completed all of our designated user stories starting with the ones with highest     priority.  

Did the members cooperate well?
Yes the members did cooperate well in this sprint. 

Was the workload sufficinent and/or manageable?
This week our user stories were manageable as we completed all of them. Regarding whether they were sufficient is a bit hard to tell 
because we didn’t want to add too much for the recond to last sprint. The reason for this is that we predict the last sprint will be to fix the 
bugs and small errors in the program. 

What needs to change until the next sprint?
The next sprint we should not add anything new, only fix bugs and remove excess code.

----------------------------------------------------------------------------------------------------------------------------------------------

Team Reflection:

*Customer Value and Scope*

*The chosen scope of the application under development including the priority of features and for whom you are creating value?:

WEEK 3: How we chose the scope of our application under the Scrum board meeting decided that the priority should be a playable version of
flashcards, that would give our primary customer middle schoolers a tool that they can use in all of their courses. Later focusing on adding
more functionality like a Spelling test, and multiple choice answers.

WEEK 7:
The primary customer group is still people in the school-age, mostly students around middle-school. 
We first decided that the priority for the application should be a playable version of flashcards, with the ability to later add on more functionality 
to the application. That could be things like a spelling-test and multiple choices-test. 
We discovered quite quickly that we would have the time to extend our application with these features. Now we have all 3 features implemented
in our application; spelling, multiple choices and flashcards, so that the user can choose their own way of learning. We even had the discussion
to implement even more functionality, such as having a “folder” functionality. The idea behind that was that the user could sort their study tests in specific 
folders. However, we felt like we were a little short on time to accomplish that, and since we did not think that the folder-feature would make a big difference 
for the application (the priority was not so high), we chose to skip that. 



*The success criteria for the team in terms of what you want to achieve within the project (this can include the application, but also your
learning outcomes, your teamwork, or your effort)?:

WEEK 4:
The success criteria for this project is to have the program runnable and function as intended. Display the studying methods (for example 
flashcards), have it intractable as well as create and edit sets. When it comes to the part of the projekt that doesn’t regard the program 
itself i.e. learning, teamwork and effort.
Learning: Throughout the project we would like to learn more about how to work in an Agile way.
Teamwork: Of course we would like to improve our teamwork. Which would include a workspace where everyone gets a chance to give their view on 
the subject and their say on it.
Effort: The amount of effort we would like to use for this project is enough for us to be proud of what we’ve done.

WEEK 6:
The success criteria has not changed much, we have minimal requirements for the product that was not previously mentioned. It needs to be runnable, 
the program should be able to create flash sets consisting of flash cards, spelling sets consisting of spelling cards and multiple choice sets 
consisting of multiple choice cards. The user should be able to run/play the sets he/she created and edit sets.
Learning: We would like to learn more agile practices such as the multi layer cake model and how we as a group can work more vertically instead of horizontally.
Teamwork: Our teamwork has improved since week 4, both our communication and cooperation, however we can still enhance it. 
We have good teamwork between the members of the backend and good teamwork between the members in frontend, but we could further improve it between the two. 
We could do so by giving more overviews of the code in backend to frontend and vice versa, so that everyone comprehends what everyone is working on and give 
their opinion on it. Right now we don’t really have much insight into each other's work, if someone in backend were to modify the work of someone in frontend, 
he wouldn’t be able to.
Effort: We don’t need to put in an absurd amount of hours into our product, but enough for us to accomplish the minimal requirements that we now have and feel 
pleased with ourselves.  


*Your user stories in terms of using a standard pattern, acceptance criteria, task breakdown and effort estimation and how this influenced the
way you worked and created value?:

WEEK 3: Our user stories were written according to examples and descriptions shown in the book (2nd edition - director's cut) Scrum and XP from
trenches by Henrik Kniberg meaning each user story included these things : Id, name, prioritization, estimated time, how to demo and notes. The
acceptance criteria for each story is in this case the how to demo part. We ran into some difficulties later on though because our stories had
been written in quite broad terms. In the future we would like to have smaller stories that are divided into specific tasks and that most are
reasonable to complete in the timespan of a sprint. This will be achieved by changing and adding more specific stories throughout the project
when needed and adding them into the scrum board.


*Your acceptance tests, such as how they were performed, with whom, and which value they provided for you and the other stakeholders:?
WEEK 5:
How we Demo finished user stories, is when they are runnable and able to be merged into the main branch. Our acceptance test is by 
following the acceptance criteria and only when the criteria is met, are you moving the user story to done. These are performed with the 
group at the end of the week, to see if what is done and what needs more work, and or if it needed to be split up into smaller parts, it 
also helps our team with keeping the dividing. This helps us so when it is time at the sprint review to show our PO what we have done this 
week.

WEEK 7:
We now use checklists on each item in trello to clearly show what acceptance criterias needs to be met for each story, and also what criteria
have been completed. This way of listing acceotance criteria has made it easier for us to work on the same user stories together and for us
to see what the others are working on. We would however need to be more distictive between how we define our user stories and our quick fixes.
During our project we've run into a lot of smaller things that needs to be fixed, this has led to us creating objects in trello which are not
user stories but are fixes that needs to be done in order to work towards a user story or even several user stories. We would need to openly
discuss and distinguish between how the fixes should be written out. Our current method has worked but has led to confusion about which objects
are user stories and which ones that are just fixes and how they should be written. When looking on our trello, we've had to deal with and
rewrite objects so that they make sense for everyone, this would have been much easier had we discussed the rules of writing user stories 
and fixes in more detail in the beginning.

WEEK 6:
When we as programmers deem a user story that we have worked in as “done”, it needs to meet the requirements for DoD (definition of done). 
Every individual user story has an acceptance criteria, if the user story meets the requirements of the acceptance criteria it will progress 
into the “review state” where it will be reviewed by the PO. If the PO deems this user story as done it will progress into the “done state” 
where it’s completely finished. The overall PO satisfaction for the product is set by the PO testing and interacting with the application. 
This week the PO had a representation layer to interact with as opposed to week four, a runnable program with panels/scenes that were drawn up.
The PO could navigate around the application, create and play sets. There were some bugs and the application does not fully work yet, 
he was not so pleased. Personally I think he’s too harsh given that the product practically reaches the minimal requirements, 
and thus he shouldn’t be displeased that we are still in the time frame and haven’t met any real setbacks in that regard.


*The three KPIs you use for monitoring your progress and how you use them to improve your process:?
WEEK 5:
We are using these three KPI´s:
POs satisfaction
Designated user stories vs completed user stories
Stress Level

By looking at the “POs satisfaction” KPI, we can see if we need to improve our work, and maybe give some more effort if the PO is not 
satisfied by our work. “Designated user stories vs completed user stories” is giving us some important information about the workflow. 
If the designated user stories are more than the completed stories, we need to reduce the workflow. And if it is the other way around, 
we can increase it. The “stress level” KPI is closely related to the workflow KPI. If we have a good workflow KPI, the stress level curve 
will hopefully go down. The stress level KPI is important because it also shows us if we can increase the workflow, or if we need to reduce 
some work. Keeping track of the stress level among the group members is important due to mental health and general well being. 

Week 6: 
As previously stated each KPI gives good insight on various aspects of the project but where they give the most information is when they are 
used together. Compared to how each KPI covers an individual's progress or the sprints. When comparing them with each other we shift from 
individual to the project as a whole. With this we can improve our overall workflow and structure.

----------------------------------------------------------------------------------------------------------------------------------------------

*Social Contract and Effort*

*Your social contract (Links to an external site.), i.e., the rules that define how you work together as a team, how it influenced your work,
*and how it evolved during the project (this means, of course, you should create one in the first week and continuously update it when the
need arrives)

WEEK 4:
We created a social contract the first week. In the end of last week we noticed that we needed to add some things to the contract to help us
work better as a team:
- We want to add a “Meeting Section” in our Contract that describes how our meetings should be used, why we need them and creating a structure
so that every meeting becomes efficient and purposeful.
- Raise your hand to speak. This will help get everyone talking equally. In the case of major decisions, each member, one at a time, must say
what they think
- Points we can relate to during the meetings. One for Monday and one for Friday.
- Do not deal with other things during meetings, pay attention, respect each other!
- The scrum master holds the meeting and is responsible for the protocol being created and followed.
- We create the protocol together at the end of the previous meetings.
- We have decided that we have meetings on Mondays, Wednesdays and Fridays. Wednesday meetings mainly take place over discord. If necessary,
we also have meetings on Tuesdays. We have tried to follow these new rules in the contract, but we still think that we can make our meetings
more efficient. We have made points that we can relate to during the meetings, but we should write them down in a protocol so that we have
them in one specific place. We think that the meeting schedule has worked well, meetings on monday, wednesday and friday. However, we do
think that we need to update the social contract one more time. We believe that the backend-group needs one more planned meeting on tuesdays.

*There is a survey (Links to an external site.) you can use for evaluating how the team is perceiving the process and if it is used by several
teams it will also help you
to assess if your team is following a general pattern or not.:?

*The time you have spent on the course and how it relates to what you delivered (so keep track of your hours so you can describe the current
situation)

WEEK 3:
We’ve spent a lot of time on meetings this first sprint. We had 3 meetings in total that were held on Monday, Wednesday and Friday respectively.
Our planned 15 minute meeting we had this wednesday went overtime and went on for closer to 1 hour, the other 2 meetings went on for over two
hours and yet we feel like we didn’t plan enough. Looking back, this is probably because of the lack of structure in our meetings. We’ve worked
with overall goals in mind that we’ve communicated to each other verbally which has made things a bit unclear sometimes. In the future we would
like to be more prepared before each meeting. This can be achieved through designating a leader to each meeting (the scrum master) that is
responsible for making sure the social contract is adhered to properly. The role of the scrum master needs to be defined more clearly in the
social contract.

WEEK 5:
We’ve adapted a more structured approach to holding our meetings that is in accordance with the social contract. The meetings have become more
time efficient and in turn gotten a bit shorter. The monday meeting this week (week 5) took 2 hours and the wednesday meeting took around 30 
minutes this time. The Friday meeting still went on for about 3 hours (with breaks) but this time we had some extra complications that had to 
be taken care of which made it go on longer. Now, the scrum master is taking a more active “team leader” role in each meeting which has 
resulted in much less arguments during meetings and everyone being more on track with less confusion than before. We still see some potential 
for improvement when it comes to everyone getting an equal voice during meetings. As it is now we don’t have any system for who gets to talk 
when, the only rule is that only one person talks at a time and if you want to talk while someone else is talking, you have to wait. This 
could be improved through having a “speaker list” each meeting where the scrum master types up a list of each person’s name on the whiteboard 
and there keeps track of how many times each person has spoken, so that when choosing who gets to talk when people put up their hands, the 
order of which they should be chosen is according to the list. Those who have spoken the least get prioritized over others.

----------------------------------------------------------------------------------------------------------------------------------------------
*Design decisions and product structure*

*How your design decisions (e.g., choice of APIs, architecture patterns, behaviour) support customer value?:
WEEK 4:
This week our main focus was restructuring our code into a MVC model, which will help our PO in easier seeing progress, as well as for the
coders being able to demo separate parts. This will help us in the future when we add features that our PO wants later on and gives us a
structure that will be followed during all of the sprints, to achieve this we used a UML Diagram. Frontend and backend is still an integral
part of our work, splitting it up into several parts so that we can effectively produce a demoable product. Our use of colors in the program
is chosen so the customer will feel safe while learning. How we structure the frontend of the application is with an easy to understand menus
with rounded buttons for a relaxed feeling for when the program is used. We want to make it easily traversable when going through the
application. This can be something we change depending on how the application feels when we use it


*Which technical documentation you use and why (e.g. use cases, interaction diagrams, class diagrams, domain models or component diagrams,
text documents):?

WEEK 3:
We used a web application called Lucidchart to model an UML diagram over our Learno program. This UML is not yet complete and will be updated
throughout the project. It’s a good way to work since it allows easy access to the UML for everyone to view and edit the UML.

*how you use and update your documentation throughout the sprints

WEEK 3:
This sprint, we used Lucidchart to come up with a starting point for the project. It was changed a lot throughout the sprint.
In the future we would like to follow design patterns when setting up the structure of the program. This can be achieved by having a meeting
at the start of the sprint where we go over the project plan in Lucidchart.

*how you ensure code quality and enforce coding standards?:

WEEK 4:
We currently have a rule when pushing code to git that the code should be runnable. When it comes to the code we have at the end of the sprint,
however, we currently have no written rules in place to ensure quality. We do however strive towards following general object oriented
programming standards such as high coupling, low coherence, using design patterns in our solutions and of course the SOLID principles. The lack
of comments inside the code has made it hard for us to understand code that others in the group have written. We would like to have clean code
that is easy for anyone to understand and is runnable. To achieve easily understood code we need to enforce the rule of 100% javadoc coverage
at the end of each sprint. When working and pushing to git throughout the sprint, however, we should strive towards simple comments on each new
implemented method and variable, but during the sprint it doesn’t have to be perfect. To ensure clean code we should reflect upon the SOLID
principles. If a solution seems too long or complex, we should try to simplify the solution.

WEEK 5:
We have a new rule where we always have to comment on new code that we write from now on, which we didn’t have before. To make it easy for 
others to understand and work on yor code. We still only push when we have runnable code. We noticed from earlier sprints that not commenting 
made it very difficult for others to work with your code, so that is now obligatory. We still strive for object oriented programming such as 
low coupling, high cohesion following the design principles and implementing design patterns. We try to implement solutions that are not too 
long and complex, but simple and easy to understand. To achieve easily understood code we need to enforce the rule of 100% javadoc coverage 
at the end of each sprint. 

----------------------------------------------------------------------------------------------------------------------------------------------

*Application of Scrum*

*the roles you have used within the team and their impact on your work?:

WEEK 3:
We have given one member of the group a role of Scrum Master, that person has not been able to do anything substantial because we worked
collectively as the “scrum master”, in the future we would like the scrum master to take a more active role by being in charge of each meeting.
This can be achieved by updating the social contract to include tasks like being responsible for the adherence to protocol during meetings for
the scrum master. We also split up in frontend and backend developers, and it worked fine but because of the poor structure on the stories gave
us more workload on some members of the team.

WEEK 7:
One person in the group is given the role of scrum master each week. The person acting scrum master for that week is mainly responsible for structuring the meetings. 
We also have one person each week that has the role of being the PO. The PO´s job is to rate the product from 1-10 each week. 
This is a good indicator of how well we did that week. By looking at the PO´s rating, we can see how much effort and deliverables we put in that week. 
If the product owner is not happy about what we did last sprint, we need to go back and see what the reason behind it was.
For example it could be that people were stressed, or that the workload was too much, maybe we did not manage to deliver 
as much as what we said. This is some important information, which could be used to improve our team´s sprints in the future. 


*the agile practices you have used and their impact on your work:?

WEEK 3:
We’ve been working in sprints and been using sprint reviews and other retrospectives to reflect, and in doing so it has applied better structure
to our project. However we think we also need better structure in our meetings, pointers that we can follow and talk about in our for example
sprint review, this will save us time. All the meetings we have are sort of ineffective and have siphoned all the time available for us to work
and complete all the stories.

WEEK 6:
We’re still working according to scrum, which means we have a product backlog, a scrum board that gets updated each sprint during the planning 
phase, and then a sprint review at the end of each sprint where we reflect over the passed sprint and where we may update the backlog. Our only 
deviation from the formal scrum is that we don’t have daily scrum meetings, instead we have sprint planning on mondays, a lunch meeting on 
wednesdays and a  sprint review meeting on fridays. All of these meetings now have concrete agendas that the scrum master makes sure is followed. 
The way we structure our meetings has improved and it’s very noticeable in how much time we need to spend on each meeting. Friday meetings for 
example used to go on for about 5 hours and most of that time was spent talking about things not relevant to the meeting and sometimes working 
on the wrong things. Friday meetings after we implemented the meeting agendas now usually take 2 hours. This is one of the most valuable 
improvements we’ve made during the course of this class in terms of saving time and energy. 

The manner in which we organize our scrum board is something that could be improved, it would’ve been helpful to save which week what stories 
were completed, as it is now all completed user stories get bundled up into “done” which makes it harder to look back and compare each sprint. 
This is however kind of documented in our KPIs “designated user stories“ and “completed user stories” where the number of user stories designated 
and listed by each person is documented, but it would be nice to see what the user stories actually were and not only a number. Another 
improvement would be to be more consistent in how we order the user stories so that the ones shown at the top are the ones of highest importance, 
this is something we’ve been a bit sloppy with.

It’s a bit too late to implement these improvements now as we are close to the end of our work and our scrum board is mostly empty. But if we were 
to improve we would need to include the rule of always ordering user stories depending on importance as part of the social contract.

*the sprint review and how it relates to your scope and customer value (Did you have a PO, if yes, who?, if no, how did you carry out the
review? Did the review result in a re-prioritisation of user stories? How did the reviews relate to your DoD? Did the feedback change your
way of working?)?:

WEEK 4:
We have a PO whose name is Anthon, and he is very pleased with the product as a whole, however he lacks a representation layer so it’s been
difficult for him to review our work. The code also doesn’t have enough comments to help others understand it, which makes it harder for all
members including the PO. We will therefore comment on all the changes that we do in our code henceforth and thus this feedback has changed
the way we work. We have not changed the priority of user stories, but we have added new user stories that we forgot to add, and these became
priority number one, because they were needed pronto. The new user stories were needed to be completed before everything else in order for the
program to work the way it’s supposed to. All members of the group have a similar understanding of what the complete product will look like,
we have for the most part the same vision for our product. We have a pretty good layout for our scrum board, if a product backlog item does
not meet the requirements for the DoD (Definition of Done), it won’t progress further to the “in review” state. If the item does meet the
requirements it will progress further, probably all the way to the “done” state, where it’s completely finished. In our reviews we talked about
the user stories we had worked upon in the previous sprint, and decided if they met the requirements of the DoD or not. If they did they will
be reviewed by the PO or a TA, if they did not they are still in progress of being completed.

WEEK 7:We now have a better understanding of how to use a PO. This week in specifically useful because it was the second to last sprint, 
and made it clear what needed to be done until the presentation, fixing know bugs and such, Our DoD has not been changed so the PO have judged the same way after 
every sprint but what has changed is what we have to present,  we got better at presenting a functional product and able to show of every User Story for that week, 
and if not showed what needed to be done to make it Done. Our understanding of what the product should look like hasnt changed either.

*best practices for learning and using new tools and technologies (IDEs, version control, scrum boards etc.; do not only describe which tools
you used but focus on how you developed the expertise to use them) relation to literature and guest lectures (how do your reflections relate
to what others have to say?)?:

Week 5:
In this project we used github, a scrum board and lucidchart (UML).

Scrum Board: The scrum board was used to keep track of our work. It served as an overview of the project, be it for one sprint or the entire 
project. In the beginning we only filled it with the tasks we aimed to complete throughout the project. With time, as the project grew bigger, 
we realized that we need to improve it. So that it could be more easily used/read. Our improvements thus came step by step, like adding labels 
to stories to see what area the task covered, making checklists for tasks to see what it covered and other things. 

Lucidchart: Lucidchart was a great tool for creating UML diagrams and, with the UML, made it clear how the different parts of the program should 
interact with each other. Throughout our use of lucidchart and creating the UML we all had some understanding of both. This knowledge differed 
from each other thus while working with them, we teached one another in the areas we lacked.

GitHub: We probably learned the most whilst using github (of the different tools). This included using branches, most significantly how to merge 
and to resolve the conflicts when working in a group. This happened by steadily working towards the wanted outcome and helping each other as much 
as we could.

To summarize, the best practises we found during this project was to try to achieve good results, by a bit of trial and error, which gave a greater 
understanding of using the tool. The other was to take help from each other as everyone learned something different and hade different mindsets 
regarding problems.


*relation to literature and guest lectures (how do your reflections relate to what others have to say?):
Week 6:
Matthias shows us in the guest lecture why the structure of scrum is necessary for success, or more like how not working agile fails the longer 
the project goes on, mostly because of communication. And with this in mind this became a key part in our meetings catching up so no 
misunderstandings can happen. Our reflections have been standard with key structure that is necessary for working agile. Our application of scrum 
is in the same way that Matthias have used, but with a few differences in manitorial stuff like when the meetings are, how long of a sprint and 
such. In the beginning it was hard to visualize how to work with a PO, and the guest lecture helped with that “team is in control of its process 
and tool -> we decided how we wanted to develop” this way it showed us that the PO is a guideline while we get to develope how we want just as 
long it follows scrum and the stories gets done.
----
